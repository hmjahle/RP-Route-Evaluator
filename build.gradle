buildscript {
    repositories {
        maven {
            url 'https://vismaartifactory.jfrog.io/artifactory/optimization-maven-virtual-repository'
            credentials {
                username = "$System.env.JFROG_USERNAME"
                password = "$System.env.JFROG_ACCESS_KEY"
            }
            name = "maven-main-cache"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.29.0"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
    }
}

plugins {
    id 'java'
    id 'application'
    id "com.jfrog.artifactory" version "4.28.4"
    id 'maven-publish'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

group 'com.visma.of'
mainClassName = 'Main'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

task incrementVersion {
    doLast {
        Properties props = new Properties()
        File propsFile = new File('gradle.properties')
        props.load(propsFile.newDataInputStream())
        def stable_project_version = props.getProperty('version') as String
        def (major, minor) = stable_project_version.tokenize('.')
        minor = String.valueOf(minor.toInteger() + 1)
        String project_version = major + '.' + minor
        props.setProperty('version', project_version)
        props.store(propsFile.newWriter(), null)
        println(project_version)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task printVersion {
    // any code that goes here is part of configuring the task
    // this code will always get run, even if the task is not executed
    doLast { // add a task action
        // any code that goes here is part of executing the task
        // this code will only get run if and when the task gets executed
        println project.version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            "junit:junit:4.13.2",
            "org.mockito:mockito-core:4.6.1"
    )
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    main.resources.srcDirs = ['src/main/resources']
    test.java.srcDirs = ['src/test/java']
    test.resources.srcDirs = ['src/test/resources']
}

repositories {
    maven {
        url 'https://vismaartifactory.jfrog.io/artifactory/optimization-maven-virtual-repository'
        credentials {
            username = "$System.env.JFROG_USERNAME"
            password = "$System.env.JFROG_ACCESS_KEY"
        }
    }
}

// attach the generated folder as source for this project
sourceSets {
    main {
        java {
            srcDir "$buildDir/java-client/src/main/java"
        }
    }
}


artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'optimization-maven-repository'
            username = "$System.env.JFROG_USERNAME"
            password = "$System.env.JFROG_ACCESS_KEY"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = 'optimization-maven-virtual-repository'
            username = "$System.env.JFROG_USERNAME"
            password = "$System.env.JFROG_ACCESS_KEY"
            maven = true

        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}"
            artifactId = "rp-route-evaluator"
            version = "${version}"
            from components.java
            artifact(sourcesJar) {
                classifier = 'sources'
            }
        }
    }
}


artifactoryPublish {
    dependsOn jar
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "rp-route-evaluator"
        property "sonar.projectKey", "RP-Route-Evaluator"
        property "sonar.projectBaseDir", "$rootDir"
    }
}
tasks['sonarqube'].dependsOn test

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport